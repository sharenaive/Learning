{
	// ------
	// npm 项目相关:
	// - name 和 version 属性是必须要有的，这两个属性一起形成了一个 npm 模块的唯一标识符
	// ------

  // 如果这个属性被设置为true，npm将拒绝发布它
  // 这是为了防止一个私有模块被无意间发布出去
  "private": true,

	// 项目名称
	"name" : "xxx",

	// 项目版本：大版本.次要版本.小版本
	"version" : "0.0.0",

	// 作者
	"author": "张三",

	// 项目描述 （NPM SEO）
	"description": "第一个node.js程序",

	// npm 搜索模块时所提供的关键字，方便别人搜索到 （NPM SEO）
	"keywords": ["node.js","javascript"],

	// 本 npm 模块使用所遵循的协议
	"license":"MIT",

	// 代码存放地址
	"repository": {
		"type": "git",
		"url": "https://path/to/url"
	},

	// bug 提交地址或者一个邮箱
	"bugs": {
		"url":"http://path/to/bug",
		"email":"bug@example.com"
	},

	// 代码贡献者
	"contributors":[{
		"name":"李四",
		"email":"lisi@example.com"
	}],


	// ------
	// 项目运行相关
	// ------

	// 指定项目运行的node版本范围
	"engines": {
		"node": ">=0.10.3 <0.12"
	},

	// 指定了项目的生命周期各个环节需要执行的命令
	// key 是生命周期中的事件，value 是要执行的命令
	// 运行 npm test，将执行：pretest, test, posttest
	// 运行 npm start，将执行：prestart, start, poststart
	// 运行 npm stop，将执行：prestop, stop, poststop
	// 运行 npm restart，将执行：prerestart, restart, postrestart
	// 单独运行命令方式：npm run <key>
	"scripts": {
		// 测试
		"test": "atool-test-mocha ./src/**/*-test.js",

		// 运行
		"start": "node index.js",

		// 编译
		"build": "atool-build"
	},

	// 指定了项目运行所依赖的模块
	// key是模块名称，value是版本范围
	// 版本范围是一个字符，可以被一个或多个空格分割
	// - version 精确匹配版本
	// - >version 必须大于某个版本
	// - >=version 大于等于
	// - <version 小于
	// - <=versionversion 小于
	// - 1.2.x
	// - ~version 如, ~1.2.2, 表示安装 1.2.x 的最新版本（不低于1.2.2）
	// - ^version 如, ˆ1.2.2, 表示安装 1.x.x 的最新版本（不低于1.2.2），如果大版本为 0，则行为等同 ~
	// - http://... 见下面url作为denpendencies的说明
	// - * 任何版本
	// - "" 空字符，和 * 相同
	// - version1 - version2 相当于 >=version1 <=version2.
	// - range1 || range2 范围1和范围2满足任意一个都行
	"dependencies": {
		"express": "latest",
		"mongoose": "~3.8.3",
		"handlebars-runtime": "~1.0.12",
		"express3-handlebars": "~0.5.0",
		"MD5": "~1.2.0",
		"foo" : "1.0.0 - 2.9999.9999",
		"bar" : ">=1.0.2 <2.1.2",
		"baz" : ">1.0.2 <=2.3.4",
		"boo" : "2.0.1",
		"qux" : "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0",
		"asd" : "http://asdf.com/asdf.tar.gz",
		"til" : "~1.2",
		"elf" : "~1.2.3",
		"two" : "2.x",
		"thr" : "3.3.x",
		"dyl" : "file:../dyl"
	},

	// 指定项目开发所需要的模块
	"devDependencies": {
		"bower": "~1.2.8",
		"grunt": "~0.4.1",
		"grunt-contrib-concat": "~0.3.0",
		"grunt-contrib-jshint": "~0.7.2",
		"grunt-contrib-uglify": "~0.2.7",
		"grunt-contrib-clean": "~0.5.0",
		"browserify": "2.36.1",
		"grunt-browserify": "~1.3.0"
	}

	// 指定 scrip 可用的命令对应的可执行文件的位置
	// 这里指定了 someTool 的地址是 ./bin/someTool.js
	// npm 会寻找这个文件，在 node_modules/.bin/ 目录下建立符号链接
	// 由于 node_modules/.bin/ 目录会在运行时加入系统的 PATH 变量
	// 因此在运行 npm 时，就可以不带路径，直接通过命令来调用这些脚本:
	// scripts: {
  	//     start: 'someTool build'
	// }
	"bin": {
		"someTool": "./bin/someTool.js"
	},

	// main 属性指定了模块的主入口文件
	// 意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require("foo")来使用这个模块，那么require返回的内容就是main属性指定的文件中 module.exports指向的对象
	// 这个字段的默认值是模块根目录下面的index.js
	"main": "index.js",

	// 用来设置一些项目不怎么变化的项目配置，例如port等。
	// 用户用的时候可以使用如下用法：process.env.npm_package_config_port
	"config" : {
		"port" : "8080"
	}

}
